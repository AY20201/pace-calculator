{"ast":null,"code":"var _jsxFileName = \"/Users/alexyoung/Documents/React/pace-calculator/src/containers/Calculator.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport styles from '../styles.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst unitConversions = {\n  \"MILESMETERS\": 1609.34,\n  \"METERSMILES\": 0.000621371,\n  \"KMMETERS\": 1000,\n  \"METERSKM\": 0.001,\n  \"MILESKM\": 1.60934,\n  \"KMMILES\": 0.621371,\n  \"METERSMETERS\": 1,\n  \"MILESMILES\": 1,\n  \"KMKM\": 1\n};\nexport default function Calculator() {\n  _s();\n  const [time, setTime] = useState({\n    \"hours\": 0,\n    \"minutes\": 0,\n    \"seconds\": 0\n  });\n  const [timeText, setTimeText] = useState(\"\");\n  const [distance, setDistance] = useState(0);\n  const [unit, setUnit] = useState(\"MILES\");\n  const [lastInput, setLastInput] = useState({\n    distance: 0,\n    unit: \"MILES\"\n  });\n  const [calculatedPaces, setCalculatedPaces] = useState({\n    \"200m\": \"-\",\n    \"400m\": \"-\",\n    \"600m\": \"-\",\n    \"800m\": \"-\",\n    \"1k\": \"-\",\n    \"1mi\": \"-\",\n    \"3k\": \"-\",\n    \"2mi\": \"-\",\n    \"5k\": \"-\",\n    \"10k\": \"-\",\n    \"Half Marathon\": \"-\",\n    \"Marathon\": \"-\"\n  });\n  const [equivalentTimes, setEquaivalentTimes] = useState({\n    \"400m\": \"-\",\n    \"800m\": \"-\",\n    \"1mi\": \"-\",\n    \"3k\": \"-\",\n    \"2mi\": \"-\",\n    \"5k\": \"-\",\n    \"8k\": \"-\",\n    \"10k\": \"-\",\n    \"Half Marathon\": \"-\",\n    \"Marathon\": \"-\"\n  });\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  function PaceTableRow({\n    distance,\n    unit\n  }) {\n    let timeRow = /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 23\n    }, this);\n    let numericalDistance = Number(distance.replace(/\\D/g, ''));\n    if (distance === \"Half Marathon\") {\n      numericalDistance = 21097.5;\n    }\n    if (distance === \"Marathon\") {\n      numericalDistance = 42195;\n    }\n    if (lastInput.distance > 0 && numericalDistance > lastInput.distance * unitConversions[lastInput.unit + unit]) {\n      timeRow = /*#__PURE__*/_jsxDEV(\"td\", {\n        className: styles.timeColumn,\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          children: calculatedPaces[distance]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 57\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 23\n      }, this);\n    } else {\n      timeRow = /*#__PURE__*/_jsxDEV(\"td\", {\n        className: styles.timeColumn,\n        children: calculatedPaces[distance]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 23\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        className: styles.tableElement,\n        children: distance\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), timeRow]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this);\n  }\n  function EquivalencyTableRow({\n    distance\n  }) {\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        className: styles.tableElement,\n        children: distance\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        className: styles.timeColumn,\n        children: equivalentTimes[distance]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this);\n  }\n  function CheckInputIsValid(time, distance) {\n    return !(time.hours === 0 && time.minutes === 0 && time.seconds === 0) && !(isNaN(time.hours) || isNaN(time.minutes) || isNaN(time.seconds)) && distance > 0;\n  }\n  function FormatTime(time) {\n    let numericalTime = time;\n    if (typeof numericalTime == \"object\") {\n      numericalTime = time.hours.toString().padStart(2, '0') + time.minutes.toString().padStart(2, '0') + Math.floor(time.seconds).toString().padStart(2, '0');\n      numericalTime = numericalTime.replace(/^0+(?=\\d)/, '');\n      if (numericalTime === \"0\") {\n        numericalTime = \"\";\n      }\n    }\n    //if(time.hours === 0 && time.minutes === 0 && time.se)\n    let formattedText = \"\";\n    for (var i = numericalTime.length - 1; i >= 0; i--) {\n      if (numericalTime[i] === \":\") {\n        continue;\n      }\n      if (i < numericalTime.length - 1 && (numericalTime.length - i) % 2 === 1) {\n        if (numericalTime.length - i < 6) {\n          formattedText = \":\" + formattedText;\n        }\n      }\n      formattedText = numericalTime[i] + formattedText;\n    }\n    let tenthSeconds = Math.floor((time.seconds - Math.floor(time.seconds)) * 100);\n    if (tenthSeconds > 0) {\n      formattedText = formattedText + \".\" + tenthSeconds;\n    }\n    return formattedText;\n  }\n  function GetPace(time, distanceTraveled, distancePace, unit, unitToConvert) {\n    let conversion = unitConversions[unit + unitToConvert];\n    let timeInSeconds = time.hours * 3600 + time.minutes * 60 + time.seconds;\n    let secondsPer = timeInSeconds / (distanceTraveled * conversion);\n    secondsPer *= distancePace;\n    let hours = Math.floor(secondsPer / 3600);\n    let minutes = Math.floor((secondsPer - hours * 3600) / 60);\n    let seconds = Math.floor((secondsPer - hours * 3600 - minutes * 60) * 100) / 100;\n\n    //console.log({\"hours\": hours, \"minutes\": minutes, \"seconds\": seconds});\n\n    return {\n      \"hours\": hours,\n      \"minutes\": minutes,\n      \"seconds\": seconds\n    };\n  }\n  function GetEquivalentTime(time, distanceTraveled, newDistance, unit, unitToConvert) {\n    let timeInSeconds = time.hours * 3600 + time.minutes * 60 + time.seconds;\n    let exponent = 1.06;\n    if (newDistance * unitConversions[unitToConvert + \"KM\"] < 1) {\n      exponent = 1.1;\n    }\n    //Pete Riegel formula\n    let newTime = timeInSeconds * Math.pow(newDistance / (distanceTraveled * unitConversions[unit + unitToConvert]), exponent);\n    let hours = Math.floor(newTime / 3600);\n    let minutes = Math.floor((newTime - hours * 3600) / 60);\n    let seconds = Math.floor((newTime - hours * 3600 - minutes * 60) * 100) / 100;\n    return {\n      \"hours\": hours,\n      \"minutes\": minutes,\n      \"seconds\": seconds\n    };\n  }\n  function GetPaces(time, distanceTraveled, unit) {\n    if (!CheckInputIsValid(time, distanceTraveled)) {\n      setErrorMessage(\"Please enter a valid time and distance to find paces\");\n      return;\n    }\n    setErrorMessage(\"\");\n    setLastInput({\n      distance: distanceTraveled,\n      unit: unit\n    });\n    //console.log(GetEquivalentTime({hours: 0, minutes: 4, seconds: 32}, 1500, 1, \"METERS\", \"MILES\"));\n\n    let paces = {\n      \"200m\": FormatTime(GetPace(time, distanceTraveled, 200, unit, \"METERS\")),\n      \"400m\": FormatTime(GetPace(time, distanceTraveled, 400, unit, \"METERS\")),\n      \"600m\": FormatTime(GetPace(time, distanceTraveled, 600, unit, \"METERS\")),\n      \"800m\": FormatTime(GetPace(time, distanceTraveled, 800, unit, \"METERS\")),\n      \"1k\": FormatTime(GetPace(time, distanceTraveled, 1, unit, \"KM\")),\n      \"1mi\": FormatTime(GetPace(time, distanceTraveled, 1, unit, \"MILES\")),\n      \"3k\": FormatTime(GetPace(time, distanceTraveled, 3, unit, \"KM\")),\n      \"2mi\": FormatTime(GetPace(time, distanceTraveled, 2, unit, \"MILES\")),\n      \"5k\": FormatTime(GetPace(time, distanceTraveled, 5, unit, \"KM\")),\n      \"10k\": FormatTime(GetPace(time, distanceTraveled, 10, unit, \"KM\")),\n      \"Half Marathon\": FormatTime(GetPace(time, distanceTraveled, 21097.5, unit, \"METERS\")),\n      \"Marathon\": FormatTime(GetPace(time, distanceTraveled, 42195, unit, \"METERS\"))\n    };\n    let equivalencies = {\n      \"400m\": FormatTime(GetEquivalentTime(time, distanceTraveled, 400, unit, \"METERS\")),\n      \"800m\": FormatTime(GetEquivalentTime(time, distanceTraveled, 800, unit, \"METERS\")),\n      \"1mi\": FormatTime(GetEquivalentTime(time, distanceTraveled, 1, unit, \"MILES\")),\n      \"3k\": FormatTime(GetEquivalentTime(time, distanceTraveled, 3, unit, \"KM\")),\n      \"2mi\": FormatTime(GetEquivalentTime(time, distanceTraveled, 2, unit, \"MILES\")),\n      \"5k\": FormatTime(GetEquivalentTime(time, distanceTraveled, 5, unit, \"KM\")),\n      \"8k\": FormatTime(GetEquivalentTime(time, distanceTraveled, 8, unit, \"KM\")),\n      \"10k\": FormatTime(GetEquivalentTime(time, distanceTraveled, 10, unit, \"KM\")),\n      \"Half Marathon\": FormatTime(GetEquivalentTime(time, distanceTraveled, 21097.5, unit, \"METERS\")),\n      \"Marathon\": FormatTime(GetEquivalentTime(time, distanceTraveled, 42195, unit, \"METERS\"))\n    };\n    setCalculatedPaces(paces);\n    setEquaivalentTimes(equivalencies);\n  }\n  const handleOnChange = e => {\n    let numericalString = e.target.value.replaceAll(\":\", \"\");\n    let timeString = numericalString.padStart(5, '0');\n    let seconds = Number(timeString.slice(-2));\n    let minutes = Number(timeString.slice(-4, -2));\n    let hours = Number(timeString.slice(0, -4));\n    setTime({\n      hours: hours,\n      minutes: minutes,\n      seconds: seconds\n    });\n\n    //console.log({hours: hours, minutes: minutes, seconds: seconds});\n\n    //if(e.target.value.slice(-1) === \":\") { \n    //numericalString += \":\"\n    //}\n    let formattedText = FormatTime(numericalString);\n    setTimeText(formattedText);\n  };\n  const handleUnitSelect = e => {\n    setUnit(e.target.value);\n  };\n  const errorText = errorMessage === \"\" ? /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 46\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      className: styles.errorText,\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 96\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 62\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.titleContainer,\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        children: /*#__PURE__*/_jsxDEV(\"b\", {\n          className: styles.title,\n          children: \"PACE & SPLIT CALCULATOR\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: styles.timeField,\n        value: timeText,\n        placeholder: \"Time (hh:mm:ss)\",\n        onChange: e => handleOnChange(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        className: styles.inputField,\n        placeholder: \"Distance\",\n        onChange: e => setDistance(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"units\",\n        id: \"units\",\n        onChange: e => handleUnitSelect(e),\n        className: styles.dropdown,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"MILES\",\n          children: \"MI\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"KM\",\n          children: \"KM\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"METERS\",\n          children: \"M\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.button,\n        onClick: () => GetPaces(time, distance, unit),\n        children: \"Get Pace\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 13\n    }, this), errorText, /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center',\n        marginTop: 20\n      },\n      children: /*#__PURE__*/_jsxDEV(\"b\", {\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: styles.labelText,\n          children: \"Paces\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: styles.paceTable,\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              className: styles.tableElement,\n              children: \"Distance:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: styles.tableElement,\n              children: \"Time:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(PaceTableRow, {\n            distance: \"200m\",\n            unit: \"METERS\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(PaceTableRow, {\n            distance: \"400m\",\n            unit: \"METERS\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(PaceTableRow, {\n            distance: \"600m\",\n            unit: \"METERS\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(PaceTableRow, {\n            distance: \"800m\",\n            unit: \"METERS\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(PaceTableRow, {\n            distance: \"1k\",\n            unit: \"KM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(PaceTableRow, {\n            distance: \"1mi\",\n            unit: \"MILES\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(PaceTableRow, {\n            distance: \"3k\",\n            unit: \"KM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(PaceTableRow, {\n            distance: \"2mi\",\n            unit: \"MILES\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(PaceTableRow, {\n            distance: \"5k\",\n            unit: \"KM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(PaceTableRow, {\n            distance: \"10k\",\n            unit: \"KM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(PaceTableRow, {\n            distance: \"Half Marathon\",\n            unit: \"METERS\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(PaceTableRow, {\n            distance: \"Marathon\",\n            unit: \"METERS\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center',\n        marginTop: 20\n      },\n      children: /*#__PURE__*/_jsxDEV(\"b\", {\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: styles.labelText,\n          children: \"Equivalent Times\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: styles.paceTable,\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              className: styles.tableElement,\n              children: \"Distance:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: styles.tableElement,\n              children: \"Time:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(EquivalencyTableRow, {\n            distance: \"400m\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(EquivalencyTableRow, {\n            distance: \"800m\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(EquivalencyTableRow, {\n            distance: \"1mi\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(EquivalencyTableRow, {\n            distance: \"3k\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(EquivalencyTableRow, {\n            distance: \"2mi\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(EquivalencyTableRow, {\n            distance: \"5k\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(EquivalencyTableRow, {\n            distance: \"8k\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(EquivalencyTableRow, {\n            distance: \"10k\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(EquivalencyTableRow, {\n            distance: \"Half Marathon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(EquivalencyTableRow, {\n            distance: \"Marathon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: 800,\n          textAlign: 'left',\n          marginTop: 10,\n          marginBottom: 100\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.descriptionText,\n          children: \"Equalivalent race times are estimated with the equation T2 = T1 * (D2 / D1)^1.06, a simple formula devised by Pete Riegel and published in Runner's World in 1997. For 400 and 800 meter distances, an exponent of 1.1 is used to yield more accurate results.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.descriptionText,\n          children: \"Other similar calculators:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"https://vdoto2.com/calculator\",\n            className: styles.linkText,\n            children: \"VDOT Calculator\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"https://wismuth.com/running/calculator.html\",\n            className: styles.linkText,\n            children: \"Race Equivalency Calculator\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 214,\n    columnNumber: 9\n  }, this);\n}\n_s(Calculator, \"anA0qsPhyQqXC56KETyV3iGI6bk=\");\n_c = Calculator;\nvar _c;\n$RefreshReg$(_c, \"Calculator\");","map":{"version":3,"names":["React","useState","styles","jsxDEV","_jsxDEV","unitConversions","Calculator","_s","time","setTime","timeText","setTimeText","distance","setDistance","unit","setUnit","lastInput","setLastInput","calculatedPaces","setCalculatedPaces","equivalentTimes","setEquaivalentTimes","errorMessage","setErrorMessage","PaceTableRow","timeRow","fileName","_jsxFileName","lineNumber","columnNumber","numericalDistance","Number","replace","className","timeColumn","children","tableElement","EquivalencyTableRow","CheckInputIsValid","hours","minutes","seconds","isNaN","FormatTime","numericalTime","toString","padStart","Math","floor","formattedText","i","length","tenthSeconds","GetPace","distanceTraveled","distancePace","unitToConvert","conversion","timeInSeconds","secondsPer","GetEquivalentTime","newDistance","exponent","newTime","pow","GetPaces","paces","equivalencies","handleOnChange","e","numericalString","target","value","replaceAll","timeString","slice","handleUnitSelect","errorText","container","titleContainer","title","timeField","placeholder","onChange","type","inputField","name","id","dropdown","button","onClick","style","textAlign","marginTop","labelText","paceTable","display","justifyContent","alignItems","width","marginBottom","descriptionText","href","linkText","_c","$RefreshReg$"],"sources":["/Users/alexyoung/Documents/React/pace-calculator/src/containers/Calculator.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport styles from '../styles.module.css'\n\nconst unitConversions = {\n    \"MILESMETERS\": 1609.34,\n    \"METERSMILES\": 0.000621371,\n    \"KMMETERS\": 1000,\n    \"METERSKM\": 0.001,\n    \"MILESKM\": 1.60934,\n    \"KMMILES\": 0.621371,\n    \"METERSMETERS\" : 1,\n    \"MILESMILES\" : 1,\n    \"KMKM\" : 1\n}\n\nexport default function Calculator(){\n\n    const [time, setTime] = useState({\"hours\": 0, \"minutes\": 0, \"seconds\": 0});\n    const [timeText, setTimeText] = useState(\"\");\n    const [distance, setDistance] = useState(0);\n    const [unit, setUnit] = useState(\"MILES\");\n    const [lastInput, setLastInput] = useState({distance: 0, unit: \"MILES\"})\n    const [calculatedPaces, setCalculatedPaces] = useState({\n        \"200m\": \"-\",\n        \"400m\": \"-\",\n        \"600m\": \"-\",\n        \"800m\": \"-\",\n        \"1k\": \"-\",\n        \"1mi\": \"-\",\n        \"3k\": \"-\",\n        \"2mi\": \"-\",\n        \"5k\": \"-\",\n        \"10k\": \"-\",\n        \"Half Marathon\": \"-\",\n        \"Marathon\": \"-\",\n    });\n    const [equivalentTimes, setEquaivalentTimes] = useState({\n        \"400m\": \"-\",\n        \"800m\": \"-\",\n        \"1mi\": \"-\",\n        \"3k\": \"-\",\n        \"2mi\": \"-\",\n        \"5k\": \"-\",\n        \"8k\": \"-\",\n        \"10k\" : \"-\",\n        \"Half Marathon\" : \"-\",\n        \"Marathon\" : \"-\"\n    });\n    const [errorMessage, setErrorMessage] = useState(\"\");\n\n    function PaceTableRow({ distance, unit }){\n        let timeRow = <div></div>\n        let numericalDistance = Number(distance.replace(/\\D/g,''))\n        if(distance === \"Half Marathon\") { numericalDistance = 21097.5 }\n        if(distance === \"Marathon\") { numericalDistance = 42195 }\n        if(lastInput.distance > 0 && numericalDistance > lastInput.distance * unitConversions[lastInput.unit + unit]){\n            timeRow = <td className={styles.timeColumn}><i>{calculatedPaces[distance]}</i></td>\n        }else{\n            timeRow = <td className={styles.timeColumn}>{calculatedPaces[distance]}</td>\n        }\n\n        return(\n            <tr>\n                <td className={styles.tableElement}>{distance}</td>\n                {timeRow}\n            </tr>\n        )\n    }\n\n    function EquivalencyTableRow({ distance }) {\n        return(\n            <tr>\n                <td className={styles.tableElement}>{distance}</td>\n                <td className={styles.timeColumn}>{equivalentTimes[distance]}</td>\n            </tr>\n        )\n    }\n\n    function CheckInputIsValid(time, distance){\n        return !(time.hours === 0 && time.minutes === 0 && time.seconds === 0) &&\n        !(isNaN(time.hours) || isNaN(time.minutes) || isNaN(time.seconds)) &&\n        distance > 0;\n    }\n\n    function FormatTime(time){\n        let numericalTime = time;\n        if(typeof numericalTime == \"object\"){\n            numericalTime = time.hours.toString().padStart(2, '0') + time.minutes.toString().padStart(2, '0') + Math.floor(time.seconds).toString().padStart(2, '0');\n            numericalTime = numericalTime.replace(/^0+(?=\\d)/, '');\n            if(numericalTime === \"0\") { numericalTime = \"\" }\n        }\n        //if(time.hours === 0 && time.minutes === 0 && time.se)\n        let formattedText = \"\";\n\n        for(var i = numericalTime.length - 1; i >= 0; i--){\n            if(numericalTime[i] === \":\") { continue; }\n            if(i < numericalTime.length - 1 && (numericalTime.length - i) % 2 === 1){\n                if(numericalTime.length - i < 6) {\n                    formattedText = \":\" + formattedText;\n                }\n            }\n            formattedText = numericalTime[i] + formattedText;\n        }\n        \n        let tenthSeconds = Math.floor((time.seconds - Math.floor(time.seconds)) * 100);\n        if(tenthSeconds > 0){\n            formattedText = formattedText + \".\" + tenthSeconds;\n        }\n\n        return formattedText;\n    }\n\n    function GetPace(time, distanceTraveled, distancePace, unit, unitToConvert){\n        let conversion = unitConversions[unit + unitToConvert];\n\n        let timeInSeconds = time.hours * 3600 + time.minutes * 60 + time.seconds;\n        let secondsPer = timeInSeconds / (distanceTraveled * conversion);\n\n        secondsPer *= distancePace;\n\n        let hours = Math.floor(secondsPer / 3600);\n        let minutes = Math.floor((secondsPer - hours * 3600) / 60);\n        let seconds = Math.floor((secondsPer - hours * 3600 - minutes * 60) * 100) / 100;\n\n        //console.log({\"hours\": hours, \"minutes\": minutes, \"seconds\": seconds});\n\n        return {\"hours\": hours, \"minutes\": minutes, \"seconds\": seconds};\n    }\n\n    function GetEquivalentTime(time, distanceTraveled, newDistance, unit, unitToConvert){\n        let timeInSeconds = time.hours * 3600 + time.minutes * 60 + time.seconds;\n        let exponent = 1.06;\n        if(newDistance * unitConversions[unitToConvert + \"KM\"] < 1){\n            exponent = 1.1;\n        }\n        //Pete Riegel formula\n        let newTime = timeInSeconds * Math.pow((newDistance / (distanceTraveled * unitConversions[unit + unitToConvert])), exponent);\n\n        let hours = Math.floor(newTime / 3600);\n        let minutes = Math.floor((newTime - hours * 3600) / 60);\n        let seconds = Math.floor((newTime - hours * 3600 - minutes * 60) * 100) / 100;\n\n        return {\"hours\": hours, \"minutes\": minutes, \"seconds\": seconds};\n    }\n\n    function GetPaces(time, distanceTraveled, unit){\n        if(!CheckInputIsValid(time, distanceTraveled)){\n            setErrorMessage(\"Please enter a valid time and distance to find paces\");\n            return;\n        }\n        setErrorMessage(\"\");\n        setLastInput({distance: distanceTraveled, unit: unit});\n        //console.log(GetEquivalentTime({hours: 0, minutes: 4, seconds: 32}, 1500, 1, \"METERS\", \"MILES\"));\n\n        let paces = {\n            \"200m\": FormatTime(GetPace(time, distanceTraveled, 200, unit, \"METERS\")),\n            \"400m\": FormatTime(GetPace(time, distanceTraveled, 400, unit, \"METERS\")),\n            \"600m\": FormatTime(GetPace(time, distanceTraveled, 600, unit, \"METERS\")),\n            \"800m\": FormatTime(GetPace(time, distanceTraveled, 800, unit, \"METERS\")),\n            \"1k\": FormatTime(GetPace(time, distanceTraveled, 1, unit, \"KM\")),\n            \"1mi\": FormatTime(GetPace(time, distanceTraveled, 1, unit, \"MILES\")),\n            \"3k\": FormatTime(GetPace(time, distanceTraveled, 3, unit, \"KM\")),\n            \"2mi\": FormatTime(GetPace(time, distanceTraveled, 2, unit, \"MILES\")),\n            \"5k\": FormatTime(GetPace(time, distanceTraveled, 5, unit, \"KM\")),\n            \"10k\": FormatTime(GetPace(time, distanceTraveled, 10, unit, \"KM\")),\n            \"Half Marathon\": FormatTime(GetPace(time, distanceTraveled, 21097.5, unit, \"METERS\")),\n            \"Marathon\": FormatTime(GetPace(time, distanceTraveled, 42195, unit, \"METERS\"))\n        };\n\n        let equivalencies = {\n            \"400m\": FormatTime(GetEquivalentTime(time, distanceTraveled, 400, unit, \"METERS\")),\n            \"800m\": FormatTime(GetEquivalentTime(time, distanceTraveled, 800, unit, \"METERS\")),\n            \"1mi\": FormatTime(GetEquivalentTime(time, distanceTraveled, 1, unit, \"MILES\")),\n            \"3k\": FormatTime(GetEquivalentTime(time, distanceTraveled, 3, unit, \"KM\")),\n            \"2mi\": FormatTime(GetEquivalentTime(time, distanceTraveled, 2, unit, \"MILES\")),\n            \"5k\": FormatTime(GetEquivalentTime(time, distanceTraveled, 5, unit, \"KM\")),\n            \"8k\": FormatTime(GetEquivalentTime(time, distanceTraveled, 8, unit, \"KM\")),\n            \"10k\" : FormatTime(GetEquivalentTime(time, distanceTraveled, 10, unit, \"KM\")),\n            \"Half Marathon\" : FormatTime(GetEquivalentTime(time, distanceTraveled, 21097.5, unit, \"METERS\")),\n            \"Marathon\" : FormatTime(GetEquivalentTime(time, distanceTraveled, 42195, unit, \"METERS\"))\n        };\n\n        setCalculatedPaces(paces);\n        setEquaivalentTimes(equivalencies);\n    }\n\n    const handleOnChange = (e) => {\n        let numericalString = e.target.value.replaceAll(\":\", \"\");\n\n        let timeString = numericalString.padStart(5, '0')\n\n        let seconds = Number(timeString.slice(-2));\n        let minutes = Number(timeString.slice(-4, -2));\n        let hours = Number(timeString.slice(0, -4));\n        setTime({hours: hours, minutes: minutes, seconds: seconds});\n\n        //console.log({hours: hours, minutes: minutes, seconds: seconds});\n\n        //if(e.target.value.slice(-1) === \":\") { \n            //numericalString += \":\"\n        //}\n        let formattedText = FormatTime(numericalString);\n        \n        setTimeText(formattedText)\n    }\n\n    const handleUnitSelect = (e) => {\n        setUnit(e.target.value);\n    }\n\n    const errorText = errorMessage === \"\" ? (<div></div>) : (<div className={styles.container}><p className={styles.errorText}>{errorMessage}</p></div>);\n\n    return(\n        <div>\n            <div className={styles.titleContainer}>\n                <i><b className={styles.title}>PACE & SPLIT CALCULATOR</b></i>\n            </div>\n            <div className={styles.container}>\n                <input className={styles.timeField} value={timeText} placeholder=\"Time (hh:mm:ss)\" onChange={e => handleOnChange(e)}></input>\n                <input type=\"number\" className={styles.inputField} placeholder=\"Distance\" onChange={e => setDistance(e.target.value)}></input>\n                <select name=\"units\" id=\"units\" onChange={(e) => handleUnitSelect(e)} className={styles.dropdown}>\n                    <option value=\"MILES\">MI</option> \n                    <option value=\"KM\">KM</option> \n                    <option value=\"METERS\">M</option> \n                </select>\n                <button className={styles.button} onClick={() => GetPaces(time, distance, unit)}>Get Pace</button>\n            </div>\n            {errorText}\n            <div style={{textAlign: 'center', marginTop: 20}}>\n                <b><i className={styles.labelText}>Paces</i></b>\n            </div>\n            <div className={styles.container}>\n                <table className={styles.paceTable}>\n                    <tbody>\n                        <tr>\n                            <th className={styles.tableElement}>Distance:</th>\n                            <th className={styles.tableElement}>Time:</th>\n                        </tr>\n                        <PaceTableRow distance={\"200m\"} unit={\"METERS\"}/>\n                        <PaceTableRow distance={\"400m\"} unit={\"METERS\"}/>\n                        <PaceTableRow distance={\"600m\"} unit={\"METERS\"}/>\n                        <PaceTableRow distance={\"800m\"} unit={\"METERS\"}/>\n                        <PaceTableRow distance={\"1k\"} unit={\"KM\"}/>\n                        <PaceTableRow distance={\"1mi\"} unit={\"MILES\"}/>\n                        <PaceTableRow distance={\"3k\"} unit={\"KM\"}/>\n                        <PaceTableRow distance={\"2mi\"} unit={\"MILES\"}/>\n                        <PaceTableRow distance={\"5k\"} unit={\"KM\"}/>\n                        <PaceTableRow distance={\"10k\"} unit={\"KM\"}/>\n                        <PaceTableRow distance={\"Half Marathon\"} unit={\"METERS\"}/>\n                        <PaceTableRow distance={\"Marathon\"} unit={\"METERS\"}/>\n                    </tbody>\n                </table>\n            </div>\n            <div style={{textAlign: 'center', marginTop: 20}}>\n                <b><i className={styles.labelText}>Equivalent Times</i></b>\n            </div>\n            <div className={styles.container}>\n                <table className={styles.paceTable}>\n                    <tbody>\n                        <tr>\n                            <th className={styles.tableElement}>Distance:</th>\n                            <th className={styles.tableElement}>Time:</th>\n                        </tr>\n                        <EquivalencyTableRow distance={\"400m\"}/>\n                        <EquivalencyTableRow distance={\"800m\"}/>\n                        <EquivalencyTableRow distance={\"1mi\"}/>\n                        <EquivalencyTableRow distance={\"3k\"}/>\n                        <EquivalencyTableRow distance={\"2mi\"}/>\n                        <EquivalencyTableRow distance={\"5k\"}/>\n                        <EquivalencyTableRow distance={\"8k\"}/>\n                        <EquivalencyTableRow distance={\"10k\"}/>\n                        <EquivalencyTableRow distance={\"Half Marathon\"}/>\n                        <EquivalencyTableRow distance={\"Marathon\"}/>\n                    </tbody>\n                </table>\n            </div>\n            <div style={{display: 'flex', justifyContent: \"center\", alignItems: \"center\"}}>\n                <div style={{width: 800, textAlign: 'left', marginTop: 10, marginBottom: 100}}>\n                    <p className={styles.descriptionText}>\n                        Equalivalent race times are estimated with the equation T2 = T1 * (D2 / D1)^1.06,\n                        a simple formula devised by Pete Riegel and published in Runner's World in 1997.\n                        For 400 and 800 meter distances, an exponent of 1.1 is used to yield more accurate results.\n                    </p>\n                    <p className={styles.descriptionText}>Other similar calculators:</p>\n                    <div>\n                    <a href=\"https://vdoto2.com/calculator\" className={styles.linkText}>VDOT Calculator</a>\n                    <a href=\"https://wismuth.com/running/calculator.html\" className={styles.linkText}>Race Equivalency Calculator</a>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}