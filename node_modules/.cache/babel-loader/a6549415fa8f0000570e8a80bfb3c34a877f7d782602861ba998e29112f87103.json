{"ast":null,"code":"import React,{useState}from\"react\";import styles from'../styles.module.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const unitConversions={\"MILESMETERS\":1609.34,\"METERSMILES\":0.000621371,\"KMMETERS\":1000,\"METERSKM\":0.001,\"MILESKM\":1.60934,\"KMMILES\":0.621371,\"METERSMETERS\":1,\"MILESMILES\":1,\"KMKM\":1};export default function Calculator(){const[time,setTime]=useState({\"hours\":0,\"minutes\":0,\"seconds\":0});const[timeText,setTimeText]=useState(\"\");const[distance,setDistance]=useState(0);const[unit,setUnit]=useState(\"MILES\");const[lastInput,setLastInput]=useState({distance:0,unit:\"MILES\"});const[calculatedPaces,setCalculatedPaces]=useState({\"200m\":\"-\",\"400m\":\"-\",\"600m\":\"-\",\"800m\":\"-\",\"1k\":\"-\",\"1mi\":\"-\",\"3k\":\"-\",\"2mi\":\"-\",\"5k\":\"-\",\"10k\":\"-\",\"Half Marathon\":\"-\",\"Marathon\":\"-\"});const[equivalentTimes,setEquaivalentTimes]=useState({\"400m\":\"-\",\"800m\":\"-\",\"1500m\":\"-\",\"1mi\":\"-\",\"3k\":\"-\",\"2mi\":\"-\",\"5k\":\"-\",\"8k\":\"-\",\"10k\":\"-\",\"Half Marathon\":\"-\",\"Marathon\":\"-\"});const[errorMessage,setErrorMessage]=useState(\"\");function PaceTableRow(_ref){let{distance,unit}=_ref;let timeRow=/*#__PURE__*/_jsx(\"div\",{});let numericalDistance=Number(distance.replace(/\\D/g,''));if(distance===\"Half Marathon\"){numericalDistance=21097.5;}if(distance===\"Marathon\"){numericalDistance=42195;}if(lastInput.distance>0&&numericalDistance>lastInput.distance*unitConversions[lastInput.unit+unit]){timeRow=/*#__PURE__*/_jsx(\"td\",{className:styles.timeColumn,children:/*#__PURE__*/_jsx(\"i\",{children:calculatedPaces[distance]})});}else{timeRow=/*#__PURE__*/_jsx(\"td\",{className:styles.timeColumn,children:calculatedPaces[distance]});}return/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{className:styles.tableElement,children:distance}),timeRow]});}function EquivalencyTableRow(_ref2){let{distance}=_ref2;return/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{className:styles.tableElement,children:distance}),/*#__PURE__*/_jsx(\"td\",{className:styles.timeColumn,children:equivalentTimes[distance]})]});}function CheckInputIsValid(time,distance){return!(time.hours===0&&time.minutes===0&&time.seconds===0)&&!(isNaN(time.hours)||isNaN(time.minutes)||isNaN(time.seconds))&&distance>0;}function FormatTime(time){let numericalTime=time;if(typeof numericalTime==\"object\"){numericalTime=time.hours.toString().padStart(2,'0')+time.minutes.toString().padStart(2,'0')+Math.floor(time.seconds).toString().padStart(2,'0');numericalTime=numericalTime.replace(/^0+(?=\\d)/,'');if(numericalTime===\"0\"){numericalTime=\"\";}}//if(time.hours === 0 && time.minutes === 0 && time.se)\nlet formattedText=\"\";for(var i=numericalTime.length-1;i>=0;i--){if(numericalTime[i]===\":\"){continue;}if(i<numericalTime.length-1&&(numericalTime.length-i)%2===1){if(numericalTime.length-i<6){formattedText=\":\"+formattedText;}}formattedText=numericalTime[i]+formattedText;}let tenthSeconds=Math.floor((time.seconds-Math.floor(time.seconds))*100);if(tenthSeconds>0){formattedText=formattedText+\".\"+tenthSeconds;}return formattedText;}function GetPace(time,distanceTraveled,distancePace,unit,unitToConvert){let conversion=unitConversions[unit+unitToConvert];let timeInSeconds=time.hours*3600+time.minutes*60+time.seconds;let secondsPer=timeInSeconds/(distanceTraveled*conversion);secondsPer*=distancePace;let hours=Math.floor(secondsPer/3600);let minutes=Math.floor((secondsPer-hours*3600)/60);let seconds=Math.floor((secondsPer-hours*3600-minutes*60)*100)/100;//console.log({\"hours\": hours, \"minutes\": minutes, \"seconds\": seconds});\nreturn{\"hours\":hours,\"minutes\":minutes,\"seconds\":seconds};}function GetEquivalentTime(time,distanceTraveled,newDistance,unit,unitToConvert,exponent){let timeInSeconds=time.hours*3600+time.minutes*60+time.seconds;//let exponent = 1.06;\n//if(newDistance * unitConversions[unitToConvert + \"MILES\"] <= 1 || distanceTraveled * unitConversions[unit + \"MILES\"] <= 1){\n//exponent = 1.06;\n//}\n//Pete Riegel formula\nlet newTime=timeInSeconds*Math.pow(newDistance/(distanceTraveled*unitConversions[unit+unitToConvert]),exponent);let hours=Math.floor(newTime/3600);let minutes=Math.floor((newTime-hours*3600)/60);let seconds=Math.floor((newTime-hours*3600-minutes*60)*100)/100;return{\"hours\":hours,\"minutes\":minutes,\"seconds\":seconds};}function GetPaces(time,distanceTraveled,unit){if(!CheckInputIsValid(time,distanceTraveled)){setErrorMessage(\"Please enter a valid time and distance to find paces\");return;}setErrorMessage(\"\");setLastInput({distance:distanceTraveled,unit:unit});//console.log(GetEquivalentTime({hours: 0, minutes: 4, seconds: 32}, 1500, 1, \"METERS\", \"MILES\"));\nlet paces={\"200m\":FormatTime(GetPace(time,distanceTraveled,200,unit,\"METERS\")),\"400m\":FormatTime(GetPace(time,distanceTraveled,400,unit,\"METERS\")),\"600m\":FormatTime(GetPace(time,distanceTraveled,600,unit,\"METERS\")),\"800m\":FormatTime(GetPace(time,distanceTraveled,800,unit,\"METERS\")),\"1k\":FormatTime(GetPace(time,distanceTraveled,1,unit,\"KM\")),\"1mi\":FormatTime(GetPace(time,distanceTraveled,1,unit,\"MILES\")),\"3k\":FormatTime(GetPace(time,distanceTraveled,3,unit,\"KM\")),\"2mi\":FormatTime(GetPace(time,distanceTraveled,2,unit,\"MILES\")),\"5k\":FormatTime(GetPace(time,distanceTraveled,5,unit,\"KM\")),\"10k\":FormatTime(GetPace(time,distanceTraveled,10,unit,\"KM\")),\"Half Marathon\":FormatTime(GetPace(time,distanceTraveled,21097.5,unit,\"METERS\")),\"Marathon\":FormatTime(GetPace(time,distanceTraveled,42195,unit,\"METERS\"))};let equivalencies={\"400m\":FormatTime(GetEquivalentTime(time,distanceTraveled,400,unit,\"METERS\",1.13)),\"800m\":FormatTime(GetEquivalentTime(time,distanceTraveled,800,unit,\"METERS\",1.11)),\"1500m\":FormatTime(GetEquivalentTime(time,distanceTraveled,1500,unit,\"METERS\",1.1)),\"1mi\":FormatTime(GetEquivalentTime(time,distanceTraveled,1,unit,\"MILES\",1.1)),\"3k\":FormatTime(GetEquivalentTime(time,distanceTraveled,3,unit,\"KM\",1.1)),\"2mi\":FormatTime(GetEquivalentTime(time,distanceTraveled,2,unit,\"MILES\",1.1)),\"5k\":FormatTime(GetEquivalentTime(time,distanceTraveled,5,unit,\"KM\",1.09)),\"8k\":FormatTime(GetEquivalentTime(time,distanceTraveled,8,unit,\"KM\",1.07)),\"10k\":FormatTime(GetEquivalentTime(time,distanceTraveled,10,unit,\"KM\",1.07)),\"Half Marathon\":FormatTime(GetEquivalentTime(time,distanceTraveled,21097.5,unit,\"METERS\",1.07)),\"Marathon\":FormatTime(GetEquivalentTime(time,distanceTraveled,42195,unit,\"METERS\",1.07))};setCalculatedPaces(paces);setEquaivalentTimes(equivalencies);}const handleOnChange=e=>{let numericalString=e.target.value.replaceAll(\":\",\"\");numericalString=numericalString.replace(/\\D/g,'');let timeString=numericalString.padStart(5,'0');let seconds=Number(timeString.slice(-2));let minutes=Number(timeString.slice(-4,-2));let hours=Number(timeString.slice(0,-4));setTime({hours:hours,minutes:minutes,seconds:seconds});//console.log({hours: hours, minutes: minutes, seconds: seconds});\n//if(e.target.value.slice(-1) === \":\") { \n//numericalString += \":\"\n//}\nlet formattedText=FormatTime(numericalString);setTimeText(formattedText);};const handleUnitSelect=e=>{setUnit(e.target.value);};const errorText=errorMessage===\"\"?/*#__PURE__*/_jsx(\"div\",{}):/*#__PURE__*/_jsx(\"div\",{className:styles.container,children:/*#__PURE__*/_jsx(\"p\",{className:styles.errorText,children:errorMessage})});return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{className:styles.titleContainer,children:/*#__PURE__*/_jsx(\"i\",{children:/*#__PURE__*/_jsx(\"b\",{className:styles.title,children:\"PACE & SPLIT CALCULATOR\"})})}),/*#__PURE__*/_jsxs(\"div\",{className:styles.container,children:[/*#__PURE__*/_jsx(\"input\",{className:styles.timeField,value:timeText,placeholder:\"Time (hh:mm:ss)\",onChange:e=>handleOnChange(e)}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",className:styles.inputField,placeholder:\"Distance\",onChange:e=>setDistance(e.target.value)}),/*#__PURE__*/_jsxs(\"select\",{name:\"units\",id:\"units\",onChange:e=>handleUnitSelect(e),className:styles.dropdown,children:[/*#__PURE__*/_jsx(\"option\",{value:\"MILES\",children:\"MI\"}),/*#__PURE__*/_jsx(\"option\",{value:\"KM\",children:\"KM\"}),/*#__PURE__*/_jsx(\"option\",{value:\"METERS\",children:\"M\"})]}),/*#__PURE__*/_jsx(\"button\",{className:styles.button,onClick:()=>GetPaces(time,distance,unit),children:\"Get Pace\"})]}),errorText,/*#__PURE__*/_jsx(\"div\",{style:{textAlign:'center',marginTop:20},children:/*#__PURE__*/_jsx(\"b\",{children:/*#__PURE__*/_jsx(\"i\",{className:styles.labelText,children:\"Paces\"})})}),/*#__PURE__*/_jsx(\"div\",{className:styles.container,children:/*#__PURE__*/_jsx(\"table\",{className:styles.paceTable,children:/*#__PURE__*/_jsxs(\"tbody\",{children:[/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{className:styles.tableElement,children:\"Distance:\"}),/*#__PURE__*/_jsx(\"th\",{className:styles.tableElement,children:\"Time:\"})]}),/*#__PURE__*/_jsx(PaceTableRow,{distance:\"200m\",unit:\"METERS\"}),/*#__PURE__*/_jsx(PaceTableRow,{distance:\"400m\",unit:\"METERS\"}),/*#__PURE__*/_jsx(PaceTableRow,{distance:\"600m\",unit:\"METERS\"}),/*#__PURE__*/_jsx(PaceTableRow,{distance:\"800m\",unit:\"METERS\"}),/*#__PURE__*/_jsx(PaceTableRow,{distance:\"1k\",unit:\"KM\"}),/*#__PURE__*/_jsx(PaceTableRow,{distance:\"1mi\",unit:\"MILES\"}),/*#__PURE__*/_jsx(PaceTableRow,{distance:\"3k\",unit:\"KM\"}),/*#__PURE__*/_jsx(PaceTableRow,{distance:\"2mi\",unit:\"MILES\"}),/*#__PURE__*/_jsx(PaceTableRow,{distance:\"5k\",unit:\"KM\"}),/*#__PURE__*/_jsx(PaceTableRow,{distance:\"10k\",unit:\"KM\"}),/*#__PURE__*/_jsx(PaceTableRow,{distance:\"Half Marathon\",unit:\"METERS\"}),/*#__PURE__*/_jsx(PaceTableRow,{distance:\"Marathon\",unit:\"METERS\"})]})})}),/*#__PURE__*/_jsx(\"div\",{style:{textAlign:'center',marginTop:20},children:/*#__PURE__*/_jsx(\"b\",{children:/*#__PURE__*/_jsx(\"i\",{className:styles.labelText,children:\"Equivalent Times\"})})}),/*#__PURE__*/_jsx(\"div\",{className:styles.container,children:/*#__PURE__*/_jsx(\"table\",{className:styles.paceTable,children:/*#__PURE__*/_jsxs(\"tbody\",{children:[/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{className:styles.tableElement,children:\"Distance:\"}),/*#__PURE__*/_jsx(\"th\",{className:styles.tableElement,children:\"Time:\"})]}),/*#__PURE__*/_jsx(EquivalencyTableRow,{distance:\"400m\"}),/*#__PURE__*/_jsx(EquivalencyTableRow,{distance:\"800m\"}),/*#__PURE__*/_jsx(EquivalencyTableRow,{distance:\"1500m\"}),/*#__PURE__*/_jsx(EquivalencyTableRow,{distance:\"1mi\"}),/*#__PURE__*/_jsx(EquivalencyTableRow,{distance:\"3k\"}),/*#__PURE__*/_jsx(EquivalencyTableRow,{distance:\"2mi\"}),/*#__PURE__*/_jsx(EquivalencyTableRow,{distance:\"5k\"}),/*#__PURE__*/_jsx(EquivalencyTableRow,{distance:\"8k\"}),/*#__PURE__*/_jsx(EquivalencyTableRow,{distance:\"10k\"}),/*#__PURE__*/_jsx(EquivalencyTableRow,{distance:\"Half Marathon\"}),/*#__PURE__*/_jsx(EquivalencyTableRow,{distance:\"Marathon\"})]})})}),/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',justifyContent:\"center\",alignItems:\"center\"},children:/*#__PURE__*/_jsxs(\"div\",{style:{width:800,textAlign:'left',marginTop:10,marginBottom:100},children:[/*#__PURE__*/_jsx(\"p\",{className:styles.descriptionText,children:\"Equalivalent race times are estimated with the equation T2 = T1 * (D2 / D1)^B. This simple formula was devised by Pete Riegel and published in Runner's World in 1997. Riegel used 1.06 as the exponent. This calculator uses a slighly different value (close to 1.06) for each distance. Keep in mind that this formula can produce misleading results, especially for 400m.\"}),/*#__PURE__*/_jsx(\"p\",{className:styles.descriptionText,children:\"Other similar calculators:\"}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',gap:'10px'},children:[/*#__PURE__*/_jsx(\"a\",{href:\"https://vdoto2.com/calculator\",className:styles.linkText,children:\"VDOT Calculator\"}),/*#__PURE__*/_jsx(\"a\",{href:\"https://wismuth.com/running/calculator.html\",className:styles.linkText,children:\"Race Equivalency Calculator\"}),/*#__PURE__*/_jsx(\"a\",{href:\"https://www.strava.com/running-pace-calculator\",className:styles.linkText,children:\"Strava Calculator\"})]})]})})]});}","map":{"version":3,"names":["React","useState","styles","jsx","_jsx","jsxs","_jsxs","unitConversions","Calculator","time","setTime","timeText","setTimeText","distance","setDistance","unit","setUnit","lastInput","setLastInput","calculatedPaces","setCalculatedPaces","equivalentTimes","setEquaivalentTimes","errorMessage","setErrorMessage","PaceTableRow","_ref","timeRow","numericalDistance","Number","replace","className","timeColumn","children","tableElement","EquivalencyTableRow","_ref2","CheckInputIsValid","hours","minutes","seconds","isNaN","FormatTime","numericalTime","toString","padStart","Math","floor","formattedText","i","length","tenthSeconds","GetPace","distanceTraveled","distancePace","unitToConvert","conversion","timeInSeconds","secondsPer","GetEquivalentTime","newDistance","exponent","newTime","pow","GetPaces","paces","equivalencies","handleOnChange","e","numericalString","target","value","replaceAll","timeString","slice","handleUnitSelect","errorText","container","titleContainer","title","timeField","placeholder","onChange","type","inputField","name","id","dropdown","button","onClick","style","textAlign","marginTop","labelText","paceTable","display","justifyContent","alignItems","width","marginBottom","descriptionText","gap","href","linkText"],"sources":["/Users/alexyoung/Documents/React/pace-calculator/src/containers/Calculator.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport styles from '../styles.module.css'\n\nconst unitConversions = {\n    \"MILESMETERS\": 1609.34,\n    \"METERSMILES\": 0.000621371,\n    \"KMMETERS\": 1000,\n    \"METERSKM\": 0.001,\n    \"MILESKM\": 1.60934,\n    \"KMMILES\": 0.621371,\n    \"METERSMETERS\" : 1,\n    \"MILESMILES\" : 1,\n    \"KMKM\" : 1\n}\n\nexport default function Calculator(){\n\n    const [time, setTime] = useState({\"hours\": 0, \"minutes\": 0, \"seconds\": 0});\n    const [timeText, setTimeText] = useState(\"\");\n    const [distance, setDistance] = useState(0);\n    const [unit, setUnit] = useState(\"MILES\");\n    const [lastInput, setLastInput] = useState({distance: 0, unit: \"MILES\"})\n    const [calculatedPaces, setCalculatedPaces] = useState({\n        \"200m\": \"-\",\n        \"400m\": \"-\",\n        \"600m\": \"-\",\n        \"800m\": \"-\",\n        \"1k\": \"-\",\n        \"1mi\": \"-\",\n        \"3k\": \"-\",\n        \"2mi\": \"-\",\n        \"5k\": \"-\",\n        \"10k\": \"-\",\n        \"Half Marathon\": \"-\",\n        \"Marathon\": \"-\",\n    });\n    const [equivalentTimes, setEquaivalentTimes] = useState({\n        \"400m\": \"-\",\n        \"800m\": \"-\",\n        \"1500m\": \"-\",\n        \"1mi\": \"-\",\n        \"3k\": \"-\",\n        \"2mi\": \"-\",\n        \"5k\": \"-\",\n        \"8k\": \"-\",\n        \"10k\" : \"-\",\n        \"Half Marathon\" : \"-\",\n        \"Marathon\" : \"-\"\n    });\n    const [errorMessage, setErrorMessage] = useState(\"\");\n\n    function PaceTableRow({ distance, unit }){\n        let timeRow = <div></div>\n        let numericalDistance = Number(distance.replace(/\\D/g,''))\n        if(distance === \"Half Marathon\") { numericalDistance = 21097.5 }\n        if(distance === \"Marathon\") { numericalDistance = 42195 }\n        if(lastInput.distance > 0 && numericalDistance > lastInput.distance * unitConversions[lastInput.unit + unit]){\n            timeRow = <td className={styles.timeColumn}><i>{calculatedPaces[distance]}</i></td>\n        }else{\n            timeRow = <td className={styles.timeColumn}>{calculatedPaces[distance]}</td>\n        }\n\n        return(\n            <tr>\n                <td className={styles.tableElement}>{distance}</td>\n                {timeRow}\n            </tr>\n        )\n    }\n\n    function EquivalencyTableRow({ distance }) {\n        return(\n            <tr>\n                <td className={styles.tableElement}>{distance}</td>\n                <td className={styles.timeColumn}>{equivalentTimes[distance]}</td>\n            </tr>\n        )\n    }\n\n    function CheckInputIsValid(time, distance){\n        return !(time.hours === 0 && time.minutes === 0 && time.seconds === 0) &&\n        !(isNaN(time.hours) || isNaN(time.minutes) || isNaN(time.seconds)) &&\n        distance > 0;\n    }\n\n    function FormatTime(time){\n        let numericalTime = time;\n        if(typeof numericalTime == \"object\"){\n            numericalTime = time.hours.toString().padStart(2, '0') + time.minutes.toString().padStart(2, '0') + Math.floor(time.seconds).toString().padStart(2, '0');\n            numericalTime = numericalTime.replace(/^0+(?=\\d)/, '');\n            if(numericalTime === \"0\") { numericalTime = \"\" }\n        }\n        //if(time.hours === 0 && time.minutes === 0 && time.se)\n        let formattedText = \"\";\n\n        for(var i = numericalTime.length - 1; i >= 0; i--){\n            if(numericalTime[i] === \":\") { continue; }\n            if(i < numericalTime.length - 1 && (numericalTime.length - i) % 2 === 1){\n                if(numericalTime.length - i < 6) {\n                    formattedText = \":\" + formattedText;\n                }\n            }\n            formattedText = numericalTime[i] + formattedText;\n        }\n        \n        let tenthSeconds = Math.floor((time.seconds - Math.floor(time.seconds)) * 100);\n        if(tenthSeconds > 0){\n            formattedText = formattedText + \".\" + tenthSeconds;\n        }\n\n        return formattedText;\n    }\n\n    function GetPace(time, distanceTraveled, distancePace, unit, unitToConvert){\n        let conversion = unitConversions[unit + unitToConvert];\n\n        let timeInSeconds = time.hours * 3600 + time.minutes * 60 + time.seconds;\n        let secondsPer = timeInSeconds / (distanceTraveled * conversion);\n\n        secondsPer *= distancePace;\n\n        let hours = Math.floor(secondsPer / 3600);\n        let minutes = Math.floor((secondsPer - hours * 3600) / 60);\n        let seconds = Math.floor((secondsPer - hours * 3600 - minutes * 60) * 100) / 100;\n\n        //console.log({\"hours\": hours, \"minutes\": minutes, \"seconds\": seconds});\n\n        return {\"hours\": hours, \"minutes\": minutes, \"seconds\": seconds};\n    }\n\n    function GetEquivalentTime(time, distanceTraveled, newDistance, unit, unitToConvert, exponent){\n        let timeInSeconds = time.hours * 3600 + time.minutes * 60 + time.seconds;\n        //let exponent = 1.06;\n        //if(newDistance * unitConversions[unitToConvert + \"MILES\"] <= 1 || distanceTraveled * unitConversions[unit + \"MILES\"] <= 1){\n            //exponent = 1.06;\n        //}\n        //Pete Riegel formula\n        let newTime = timeInSeconds * Math.pow((newDistance / (distanceTraveled * unitConversions[unit + unitToConvert])), exponent);\n\n        let hours = Math.floor(newTime / 3600);\n        let minutes = Math.floor((newTime - hours * 3600) / 60);\n        let seconds = Math.floor((newTime - hours * 3600 - minutes * 60) * 100) / 100;\n\n        return {\"hours\": hours, \"minutes\": minutes, \"seconds\": seconds};\n    }\n\n    function GetPaces(time, distanceTraveled, unit){\n        if(!CheckInputIsValid(time, distanceTraveled)){\n            setErrorMessage(\"Please enter a valid time and distance to find paces\");\n            return;\n        }\n        setErrorMessage(\"\");\n        setLastInput({distance: distanceTraveled, unit: unit});\n        //console.log(GetEquivalentTime({hours: 0, minutes: 4, seconds: 32}, 1500, 1, \"METERS\", \"MILES\"));\n\n        let paces = {\n            \"200m\": FormatTime(GetPace(time, distanceTraveled, 200, unit, \"METERS\")),\n            \"400m\": FormatTime(GetPace(time, distanceTraveled, 400, unit, \"METERS\")),\n            \"600m\": FormatTime(GetPace(time, distanceTraveled, 600, unit, \"METERS\")),\n            \"800m\": FormatTime(GetPace(time, distanceTraveled, 800, unit, \"METERS\")),\n            \"1k\": FormatTime(GetPace(time, distanceTraveled, 1, unit, \"KM\")),\n            \"1mi\": FormatTime(GetPace(time, distanceTraveled, 1, unit, \"MILES\")),\n            \"3k\": FormatTime(GetPace(time, distanceTraveled, 3, unit, \"KM\")),\n            \"2mi\": FormatTime(GetPace(time, distanceTraveled, 2, unit, \"MILES\")),\n            \"5k\": FormatTime(GetPace(time, distanceTraveled, 5, unit, \"KM\")),\n            \"10k\": FormatTime(GetPace(time, distanceTraveled, 10, unit, \"KM\")),\n            \"Half Marathon\": FormatTime(GetPace(time, distanceTraveled, 21097.5, unit, \"METERS\")),\n            \"Marathon\": FormatTime(GetPace(time, distanceTraveled, 42195, unit, \"METERS\"))\n        };\n\n        let equivalencies = {\n            \"400m\": FormatTime(GetEquivalentTime(time, distanceTraveled, 400, unit, \"METERS\", 1.13)),\n            \"800m\": FormatTime(GetEquivalentTime(time, distanceTraveled, 800, unit, \"METERS\", 1.11)),\n            \"1500m\": FormatTime(GetEquivalentTime(time, distanceTraveled, 1500, unit, \"METERS\", 1.1)),\n            \"1mi\": FormatTime(GetEquivalentTime(time, distanceTraveled, 1, unit, \"MILES\", 1.1)),\n            \"3k\": FormatTime(GetEquivalentTime(time, distanceTraveled, 3, unit, \"KM\", 1.1)),\n            \"2mi\": FormatTime(GetEquivalentTime(time, distanceTraveled, 2, unit, \"MILES\", 1.1)),\n            \"5k\": FormatTime(GetEquivalentTime(time, distanceTraveled, 5, unit, \"KM\", 1.09)),\n            \"8k\": FormatTime(GetEquivalentTime(time, distanceTraveled, 8, unit, \"KM\", 1.07)),\n            \"10k\" : FormatTime(GetEquivalentTime(time, distanceTraveled, 10, unit, \"KM\", 1.07)),\n            \"Half Marathon\" : FormatTime(GetEquivalentTime(time, distanceTraveled, 21097.5, unit, \"METERS\", 1.07)),\n            \"Marathon\" : FormatTime(GetEquivalentTime(time, distanceTraveled, 42195, unit, \"METERS\", 1.07))\n        };\n\n        setCalculatedPaces(paces);\n        setEquaivalentTimes(equivalencies);\n    }\n\n    const handleOnChange = (e) => {\n        let numericalString = e.target.value.replaceAll(\":\", \"\");\n        numericalString = numericalString.replace(/\\D/g,'');\n\n        let timeString = numericalString.padStart(5, '0')\n\n        let seconds = Number(timeString.slice(-2));\n        let minutes = Number(timeString.slice(-4, -2));\n        let hours = Number(timeString.slice(0, -4));\n        setTime({hours: hours, minutes: minutes, seconds: seconds});\n\n        //console.log({hours: hours, minutes: minutes, seconds: seconds});\n\n        //if(e.target.value.slice(-1) === \":\") { \n            //numericalString += \":\"\n        //}\n        let formattedText = FormatTime(numericalString);\n        \n        setTimeText(formattedText)\n    }\n\n    const handleUnitSelect = (e) => {\n        setUnit(e.target.value);\n    }\n\n    const errorText = errorMessage === \"\" ? (<div></div>) : (<div className={styles.container}><p className={styles.errorText}>{errorMessage}</p></div>);\n\n    return(\n        <div>\n            <div className={styles.titleContainer}>\n                <i><b className={styles.title}>PACE & SPLIT CALCULATOR</b></i>\n            </div>\n            <div className={styles.container}>\n                <input className={styles.timeField} value={timeText} placeholder=\"Time (hh:mm:ss)\" onChange={e => handleOnChange(e)}></input>\n                <input type=\"number\" className={styles.inputField} placeholder=\"Distance\" onChange={e => setDistance(e.target.value)}></input>\n                <select name=\"units\" id=\"units\" onChange={(e) => handleUnitSelect(e)} className={styles.dropdown}>\n                    <option value=\"MILES\">MI</option> \n                    <option value=\"KM\">KM</option> \n                    <option value=\"METERS\">M</option> \n                </select>\n                <button className={styles.button} onClick={() => GetPaces(time, distance, unit)}>Get Pace</button>\n            </div>\n            {errorText}\n            <div style={{textAlign: 'center', marginTop: 20}}>\n                <b><i className={styles.labelText}>Paces</i></b>\n            </div>\n            <div className={styles.container}>\n                <table className={styles.paceTable}>\n                    <tbody>\n                        <tr>\n                            <th className={styles.tableElement}>Distance:</th>\n                            <th className={styles.tableElement}>Time:</th>\n                        </tr>\n                        <PaceTableRow distance={\"200m\"} unit={\"METERS\"}/>\n                        <PaceTableRow distance={\"400m\"} unit={\"METERS\"}/>\n                        <PaceTableRow distance={\"600m\"} unit={\"METERS\"}/>\n                        <PaceTableRow distance={\"800m\"} unit={\"METERS\"}/>\n                        <PaceTableRow distance={\"1k\"} unit={\"KM\"}/>\n                        <PaceTableRow distance={\"1mi\"} unit={\"MILES\"}/>\n                        <PaceTableRow distance={\"3k\"} unit={\"KM\"}/>\n                        <PaceTableRow distance={\"2mi\"} unit={\"MILES\"}/>\n                        <PaceTableRow distance={\"5k\"} unit={\"KM\"}/>\n                        <PaceTableRow distance={\"10k\"} unit={\"KM\"}/>\n                        <PaceTableRow distance={\"Half Marathon\"} unit={\"METERS\"}/>\n                        <PaceTableRow distance={\"Marathon\"} unit={\"METERS\"}/>\n                    </tbody>\n                </table>\n            </div>\n            <div style={{textAlign: 'center', marginTop: 20}}>\n                <b><i className={styles.labelText}>Equivalent Times</i></b>\n            </div>\n            <div className={styles.container}>\n                <table className={styles.paceTable}>\n                    <tbody>\n                        <tr>\n                            <th className={styles.tableElement}>Distance:</th>\n                            <th className={styles.tableElement}>Time:</th>\n                        </tr>\n                        <EquivalencyTableRow distance={\"400m\"}/>\n                        <EquivalencyTableRow distance={\"800m\"}/>\n                        <EquivalencyTableRow distance={\"1500m\"}/>\n                        <EquivalencyTableRow distance={\"1mi\"}/>\n                        <EquivalencyTableRow distance={\"3k\"}/>\n                        <EquivalencyTableRow distance={\"2mi\"}/>\n                        <EquivalencyTableRow distance={\"5k\"}/>\n                        <EquivalencyTableRow distance={\"8k\"}/>\n                        <EquivalencyTableRow distance={\"10k\"}/>\n                        <EquivalencyTableRow distance={\"Half Marathon\"}/>\n                        <EquivalencyTableRow distance={\"Marathon\"}/>\n                    </tbody>\n                </table>\n            </div>\n            <div style={{display: 'flex', justifyContent: \"center\", alignItems: \"center\"}}>\n                <div style={{width: 800, textAlign: 'left', marginTop: 10, marginBottom: 100}}>\n                    <p className={styles.descriptionText}>\n                        Equalivalent race times are estimated with the equation T2 = T1 * (D2 / D1)^B.\n                        This simple formula was devised by Pete Riegel and published in Runner's World in 1997. Riegel\n                        used 1.06 as the exponent. This calculator uses a slighly different value (close to 1.06) for each distance.\n                        Keep in mind that this formula can produce misleading results, especially for 400m.\n                    </p>\n                    <p className={styles.descriptionText}>Other similar calculators:</p>\n                    <div style={{display: 'flex', gap: '10px'}}>\n                        <a href=\"https://vdoto2.com/calculator\" className={styles.linkText}>VDOT Calculator</a>\n                        <a href=\"https://wismuth.com/running/calculator.html\" className={styles.linkText}>Race Equivalency Calculator</a>\n                        <a href=\"https://www.strava.com/running-pace-calculator\" className={styles.linkText}>Strava Calculator</a>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}